{"version":3,"sources":["components/Person.js","components/PersonForm.js","components/Filter.js","services/personService.js","components/Notification.js","App.js","index.js"],"names":["Person","person","handleClick","name","number","data-id","id","data-name","onClick","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","searchName","handleSearchChange","baseUrl","newPerson","axios","post","then","response","data","get","delete","put","Notification","message","messageType","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearchName","setMessage","setMessageType","useEffect","personService","deletePerson","event","preventDefault","target","dataset","window","confirm","console","log","setTimeout","catch","err","alert","removePerson","namesToShow","filter","toLowerCase","includes","nameExists","find","p","updatedPerson","returnedPerson","updatePerson","map","length","concat","i","key","ReactDOM","render","document","getElementById"],"mappings":"uOAmBeA,EAjBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YACxB,OACE,6BACE,4BAAKD,EAAOE,KAAZ,IAAmBF,EAAOG,QAE1B,4BACEC,UAASJ,EAAOK,GAChBC,YAAWN,EAAOE,KAClBK,QAASN,GAHX,YCmBSO,EAxBI,SAACC,GAEhB,OACI,6BACI,0BAAMC,SAAUD,EAAME,WAClB,qCAEA,2BAAOC,MAAOH,EAAMI,QAASC,SAAUL,EAAMM,oBAG7C,uCAEA,2BAAOH,MAAOH,EAAMO,UAAWF,SAAUL,EAAMQ,sBAG/C,6BACI,4BAAQC,KAAK,UAAb,WCLLC,EAXA,SAACV,GAEZ,OACI,oDACwB,6BACpB,2BAAOG,MAAOH,EAAMW,WAAYN,SAAUL,EAAMY,uB,gBCHtDC,EAAU,eA4BD,EAnBA,SAACC,GAGZ,OAFgBC,IAAMC,KAAKH,EAASC,GAErBG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAgBhC,EA1BA,WAGX,OAFgBJ,IAAMK,IAAIP,GAEXI,MAAK,SAACC,GAAD,OAAcA,EAASC,SAuBhC,EAbA,SAACvB,GAGZ,OAFgBmB,IAAMM,OAAN,UAAgBR,EAAhB,YAA2BjB,KAYhC,EAPA,SAACA,EAAIL,GAGhB,OAFgBwB,IAAMO,IAAN,UAAaT,EAAb,YAAwBjB,GAAML,GAE/B0B,MAAK,SAACC,GAAD,OAAcA,EAASC,SCbhCI,EAbM,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAE7B,OAAgB,OAAZD,EACK,KAIP,yBAAKE,UAAWD,GACbD,IC2NMG,G,MA7NH,SAAC3B,GAAW,IAAD,EACS4B,mBAAS,IADlB,mBACdC,EADc,KACLC,EADK,OAESF,mBAAS,IAFlB,mBAEdxB,EAFc,KAEL2B,EAFK,OAGaH,mBAAS,IAHtB,mBAGdrB,EAHc,KAGHyB,EAHG,OAIeJ,mBAAS,IAJxB,mBAIdjB,EAJc,KAIFsB,EAJE,OAKSL,mBAAS,MALlB,mBAKdJ,EALc,KAKLU,EALK,OAMiBN,mBAAS,IAN1B,mBAMdH,EANc,KAMDU,EANC,KAkBrBC,qBATa,WACXC,IAEGpB,MAAK,SAACC,GACLY,EAAWZ,QAKD,IAEhB,IAwIMoB,EAAe,SAACC,GACpBA,EAAMC,iBAEN,IAAM5C,EAAK2C,EAAME,OAAOC,QAAQ9C,GAC1BH,EAAO8C,EAAME,OAAOC,QAAQjD,KAEjBkD,OAAOC,QAAP,0CAAkDnD,EAAlD,OA3CE,SAACG,EAAIH,GAExB4C,EACUzC,GACPqB,MAAK,SAACC,GAGLmB,IAEGpB,MAAK,SAACC,GACLY,EAAWZ,GAGX2B,QAAQC,IAAI5B,GACZgB,EAAW,GAAD,OAAIzC,EAAJ,4BAEVsD,YAAW,WACTb,EAAW,QACV,WAKRc,OAAM,SAACC,GAGNJ,QAAQC,IAAIG,GACZN,OAAOO,MAAP,2BAEAhB,EAAW,kBAAD,OAAmBzC,EAAnB,2CACV0C,EAAe,SACfY,YAAW,WACTb,EAAW,QACV,QAaLiB,CAAavD,EAAIH,IAsBf2D,EAAcvB,EAAQwB,QAAO,SAAA9D,GAAM,OAAIA,EAAOE,KAAK6D,cAAcC,SAAS5C,EAAW2C,kBAE3F,OACE,6BACE,yCAEA,kBAAC,EAAD,CAAc9B,QAASA,EAASU,WAAYA,EAAYT,YAAaA,EAAaU,eAAgBA,IAElG,kBAAC,EAAD,CACExB,WAAYA,EACZC,mBAhBqB,SAAC2B,GAE1BN,EAAcM,EAAME,OAAOtC,UAiBzB,yCACA,kBAAC,EAAD,CAAYD,UApJE,SAACqC,GACjBA,EAAMC,iBAEN,IAAMgB,EAAa3B,EAAQ4B,MAAK,SAAAlE,GAAM,OAAIA,EAAOE,KAAK6D,gBAAkBlD,EAAQkD,iBAGhF,GAAIE,GAvCe,WACnB,IAAMjE,EAASsC,EAAQ4B,MAAK,SAACC,GAAD,OAAOA,EAAEjE,OAASW,KAM9C,GAJiBuC,OAAOC,QAAP,UACZrD,EAAOE,KADK,kFAIH,CACZ,IAAMkE,EAAa,eAAQpE,EAAR,CAAgBG,OAAQa,IACrCX,EAAKL,EAAOK,GAElB,OAAOyC,EACGzC,EAAI+D,GACX1C,MAAK,SAAC2C,GACL,OAAOA,KAERZ,OAAM,SAACC,GAUN,OATAJ,QAAQC,IAAIG,GAGZf,EAAW,kBAAD,OAAmByB,EAAclE,KAAjC,2CACV0C,EAAe,SACfY,YAAW,WACTb,EAAW,QACV,MAEI,OAcX2B,GACG5C,MAAK,SAAC0C,GAEAA,GAGH7B,EAAWD,EAAQiC,KAAI,SAAAvE,GAAM,OAAIA,EAAOK,KAAO4D,EAAW5D,GAAKL,EAASoE,MAGxEzB,EAAW,eAAD,OAAgByB,EAAclE,KAA9B,2BACV0C,EAAe,WACfY,YAAW,WACTb,EAAW,QACV,KAGHH,EAAW,IACXC,EAAa,KAbba,QAAQC,IAAI,wBAiBfE,OAAM,SAACC,GAENf,EAAW,wCAAD,OAAyCe,EAAIxD,KAA7C,MACV0C,EAAe,SACfY,YAAW,WACTb,EAAW,MACXC,EAAe,MACd,KAEHU,QAAQC,IAAIG,UAEX,CAEL,IAAMnC,EAAY,CAChBlB,GAAIiC,EAAQkC,OAAS,EACrBtE,KAAMW,EACNV,OAAQa,GAGV8B,EAAqBvB,GAClBG,MAAK,SAACC,GAELgB,EAAW,WAAD,OAAYhB,EAASzB,KAArB,MACV0C,EAAe,WAEfY,YAAW,WACTb,EAAW,QACV,KAEHJ,EAAWD,EAAQmC,OAAO9C,OAI9Ba,EAAW,IACXC,EAAa,MAuFX5B,QAASA,EACTE,iBA/BmB,SAACiC,GAExBR,EAAWQ,EAAME,OAAOtC,QA8BpBI,UAAWA,EACXC,mBA5BqB,SAAC+B,GAC1BP,EAAaO,EAAME,OAAOtC,UA8BxB,uCAEA,4BACGiD,EAAYU,KAAI,SAACvE,EAAQ0E,GAAT,OACf,kBAAC,EAAD,CAAQC,IAAKD,EAAG1E,OAAQA,EAAQC,YAAa8C,WCxNvD6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6ce9b22e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ person, handleClick }) => {\r\n  return (\r\n    <div>\r\n      <li>{person.name} {person.number}</li>\r\n\r\n      <button\r\n        data-id={person.id}\r\n        data-name={person.name}\r\n        onClick={handleClick}\r\n      >\r\n        Delete\r\n        </button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.addPerson}>\r\n                <div>\r\n                    Name:\r\n                <input value={props.newName} onChange={props.handleNameChange} />\r\n                </div>\r\n\r\n                <div>\r\n                    Number:\r\n                <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n                </div>\r\n\r\n                <div>\r\n                    <button type=\"submit\">Add</button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            Filter names with : <br />\r\n            <input value={props.searchName} onChange={props.handleSearchChange} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Filter;","import axios from 'axios'\r\n\r\n//const baseUrl = \"http://localhost:3001/api/persons\"; //development\r\n//const baseUrl = \"https://phonebook-node-js.herokuapp.com/api/persons\"; //heroku backend\r\nconst baseUrl = '/api/persons' //frontEnd & backEnd in same url -> relative url\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n\r\n    return request.then((response) => response.data);\r\n};\r\n\r\n//for synching the new person into db.json\r\nconst create = (newPerson) => {\r\n    const request = axios.post(baseUrl, newPerson);\r\n\r\n    return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`);\r\n\r\n    return request;\r\n};\r\n\r\nconst update = (id, person) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, person);\r\n  \r\n    return request.then((response) => response.data);\r\n};\r\n \r\n\r\nexport default { create, getAll, remove, update };","import React from 'react';\r\n\r\nconst Notification = ({ message, messageType }) => {\r\n    //No message\r\n    if (message === null) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div className={messageType}>\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react'\r\nimport Person from './components/Person'\r\nimport PersonForm from './components/PersonForm'\r\nimport Filter from './components/Filter'\r\nimport personService from './services/personService'\r\nimport Notification from './components/Notification';\r\nimport './index.css';\r\n\r\nconst App = (props) => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [searchName, setSearchName] = useState('')\r\n  const [message, setMessage] = useState(null);\r\n  const [messageType, setMessageType] = useState('');\r\n\r\n  //load persons from db.json at start\r\n  const hook = () => {\r\n    personService\r\n      .getAll()\r\n      .then((response) => {\r\n        setPersons(response);\r\n      });\r\n  }\r\n  //parametrit: efekti, tyyppi \r\n  //(tyhjä [] -> vain komponentin ensimmäisen renderöinnin jälkeen)\r\n  useEffect(hook, [])\r\n\r\n  const updatePerson = () => {\r\n    const person = persons.find((p) => p.name === newName);\r\n\r\n    const updateOK = window.confirm(\r\n      `${person.name} is already added to the phonebook. Would you like to update the information?`\r\n    )\r\n\r\n    if (updateOK) {\r\n      const updatedPerson = { ...person, number: newNumber };\r\n      const id = person.id;\r\n\r\n      return personService\r\n        .update(id, updatedPerson)\r\n        .then((returnedPerson) => {\r\n          return returnedPerson;\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n\r\n          //Message\r\n          setMessage(`Information of ${updatedPerson.name} has already been removed from server `)\r\n          setMessageType('error')\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n          }, 5000)\r\n\r\n          return false;\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n  //TODO: add more error handling to name and phone number  \r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    const nameExists = persons.find(person => person.name.toLowerCase() === newName.toLowerCase());\r\n\r\n    //If name exists in phonebook, just update the phone number\r\n    if (nameExists) {\r\n      updatePerson()\r\n        .then((updatedPerson) => {\r\n\r\n          if (!updatedPerson) {\r\n            console.log('an error occurred')\r\n          } else {\r\n            setPersons(persons.map(person => person.id !== nameExists.id ? person : updatedPerson)) //switch old person with updated person if found \r\n\r\n            //Message\r\n            setMessage(`Details for ${updatedPerson.name} successfully updated!`)\r\n            setMessageType('success')\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 5000)\r\n\r\n            //Clear state\r\n            setNewName('')\r\n            setNewNumber('')\r\n          }\r\n\r\n        })\r\n        .catch((err) => {\r\n          //Message\r\n          setMessage(`Did not manage to change details for ${err.name}.`);\r\n          setMessageType('error')\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n            setMessageType('')\r\n          }, 5000);\r\n\r\n          console.log(err);\r\n        })\r\n    } else {\r\n      //If name doesn't exist, create person \r\n      const newPerson = {\r\n        id: persons.length + 1,\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n\r\n      personService.create(newPerson)\r\n        .then((response) => {\r\n          //Better information messsage\r\n          setMessage(`Created ${response.name}!`)\r\n          setMessageType('success')\r\n          //Information message flashes out in..\r\n          setTimeout(() => {\r\n            setMessage(null)\r\n          }, 5000)\r\n\r\n          setPersons(persons.concat(response));\r\n        })\r\n\r\n      //Clear state\r\n      setNewName('')\r\n      setNewNumber('')\r\n    }\r\n  }\r\n\r\n  const removePerson = (id, name) => {\r\n    //remove from db.json\r\n    personService\r\n      .remove(id)\r\n      .then((response) => {\r\n\r\n        //Reload persons - could also be done with filter, maybe?\r\n        personService\r\n          .getAll()\r\n          .then((response) => {\r\n            setPersons(response);\r\n\r\n            //add success message \r\n            console.log(response)\r\n            setMessage(`${name} deleted successfully! `)\r\n            //Information message flashes out in..\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 5000)\r\n\r\n          });\r\n\r\n      })\r\n      .catch((err) => {\r\n\r\n        //TODO: Doesn't come here even when deleting unexisting resource \r\n        console.log(err);\r\n        window.alert(`An error has occurred. `);\r\n        //Message\r\n        setMessage(`Information of ${name} has already been removed from server `)\r\n        setMessageType('error')\r\n        setTimeout(() => {\r\n          setMessage(null)\r\n        }, 5000)\r\n      })\r\n  };\r\n\r\n  const deletePerson = (event) => {\r\n    event.preventDefault()\r\n\r\n    const id = event.target.dataset.id;\r\n    const name = event.target.dataset.name;\r\n\r\n    const deleteOK = window.confirm(`Are you sure you want to delete ${name}?`);\r\n\r\n    if (deleteOK) {\r\n      removePerson(id, name);\r\n\r\n    }\r\n  }\r\n\r\n  //TODO: Wrap all handle change under single handleChange \r\n  //Setting state using event handler\r\n  const handleNameChange = (event) => {\r\n    //console.log(event.target.value) //check value\r\n    setNewName(event.target.value) //set value as new name \r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleSearchChange = (event) => {\r\n    //console.log(event.target.value)\r\n    setSearchName(event.target.value)\r\n  }\r\n\r\n  //show also new added names, if empty shows all \r\n  const namesToShow = persons.filter(person => person.name.toLowerCase().includes(searchName.toLowerCase()))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Notification message={message} setMessage={setMessage} messageType={messageType} setMessageType={setMessageType} />\r\n\r\n      <Filter\r\n        searchName={searchName}\r\n        handleSearchChange={handleSearchChange}\r\n      />\r\n\r\n      <h2>Add new: </h2>\r\n      <PersonForm addPerson={addPerson}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n      />\r\n\r\n      <h2>Numbers</h2>\r\n\r\n      <ul>\r\n        {namesToShow.map((person, i) =>\r\n          <Person key={i} person={person} handleClick={deletePerson} />\r\n        )}\r\n      </ul>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}